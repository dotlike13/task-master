# Task ID: 1
# Title: Architecture and Infrastructure Setup
# Status: pending
# Dependencies: None
# Priority: high
# Description: Finalize the microservices architecture and set up the initial cloud infrastructure on AWS, including ECS/EKS for deployment and Supabase for data storage.
# Details:
Components to set up: EKS cluster or ECS services, Supabase database, networking rules, and CI/CD pipeline foundation using GitHub Actions and ArgoCD. Technology Stack: AWS, Supabase, Docker, Kubernetes.

# Test Strategy:
Verify that all infrastructure components can be provisioned successfully and that services can communicate with the Supabase database. A simple 'hello world' service deployment should succeed through the ArgoCD pipeline.

# Subtasks:
## 1. AWS 네트워킹 인프라 설정 [pending]
### Dependencies: None
### Description: VPC, 서브넷, 보안 그룹 등 AWS 네트워킹 인프라를 설계하고 프로비저닝합니다.
### Details:
1. 프로젝트에 맞는 VPC를 생성합니다.
2. 여러 가용 영역에 걸쳐 퍼블릭 및 프라이빗 서브넷을 설정합니다.
3. 보안 그룹을 구성하여 필요한 서비스 간 통신을 허용합니다.
4. 외부 접근을 위한 Application Load Balancer 또는 Network Load Balancer를 설정합니다.
5. 서비스 간 내부 통신을 위한 네트워크 정책을 구성합니다.

## 2. Supabase 데이터베이스 설정 및 구성 [pending]
### Dependencies: None
### Description: Supabase 프로젝트를 생성하고 데이터베이스 스키마 및 사용자 설정을 구성합니다.
### Details:
1. Supabase 프로젝트를 생성하고 초기 설정을 구성합니다.
2. 데이터베이스 스키마를 설계하고 SQL 마이그레이션 스크립트를 작성합니다.
3. 필요한 테이블, 뷰, 함수 및 트리거를 생성합니다.
4. Row Level Security(RLS) 정책을 설정하여 데이터 접근을 제어합니다.
5. API 키를 생성하고 적절한 권한을 설정합니다.

## 3. AWS 컴퓨팅 환경 설정 (EKS/ECS) [pending]
### Dependencies: None
### Description: EKS 클러스터 또는 ECS 서비스를 설정하고 기본 컴퓨팅 환경을 구성합니다.
### Details:
1. 프로젝트 요구사항에 따라 EKS 클러스터 또는 ECS 중 적합한 컴퓨팅 환경을 선택합니다.
2. EKS 선택 시: 클러스터 크기, 노드 그룹, 자동 확장 설정을 구성합니다.
3. ECS 선택 시: 클러스터, 서비스, 작업 정의 및 자동 확장 파라미터를 구성합니다.
4. ECR(Elastic Container Registry)을 설정하고 접근 권한을 구성합니다.
5. 기본 "Hello World" 서비스를 배포하여 환경이 정상 작동하는지 테스트합니다.

## 4. GitHub Actions CI 파이프라인 구축 [pending]
### Dependencies: None
### Description: GitHub Actions를 사용하여 CI 파이프라인을 구축합니다.
### Details:
1. GitHub 저장소에 GitHub Actions 워크플로우 파일을 설정합니다.
2. 코드 변경 시 자동으로 빌드 및 테스트를 실행하는 워크플로우를 구성합니다.
3. 테스트 통과 시 Docker 이미지를 빌드하고 ECR에 푸시하는 단계를 추가합니다.
4. 보안 스캔 및 코드 품질 검사를 파이프라인에 통합합니다.
5. 워크플로우 실행 결과를 GitHub에 보고하고 알림을 설정합니다.

## 5. ArgoCD CD 파이프라인 구축 [pending]
### Dependencies: None
### Description: ArgoCD를 사용하여 CD 파이프라인을 구축합니다.
### Details:
1. EKS 클러스터에 ArgoCD를 설치하고 구성합니다.
2. 애플리케이션 배포를 위한 Git 저장소를 설정합니다.
3. Kubernetes 매니페스트 또는 Helm 차트를 사용하여 애플리케이션 정의를 작성합니다.
4. ArgoCD 애플리케이션을 생성하고 배포 전략(롤링 업데이트, 블루/그린 등)을 구성합니다.
5. 자동 동기화 및 상태 모니터링을 설정하여 GitOps 워크플로우를 완성합니다.

## 6. AWS IAM 역할 및 정책 구성 [pending]
### Dependencies: None
### Description: 서비스 간 안전한 통신을 위한 AWS IAM 역할 및 정책을 구성합니다.
### Details:
1. 프로젝트에 필요한 IAM 역할을 식별하고 생성합니다.
2. 각 서비스에 최소 권한 원칙에 따라 적절한 IAM 정책을 할당합니다.
3. EKS 서비스 계정과 IAM 역할을 연결하기 위한 IRSA(IAM Roles for Service Accounts)를 구성합니다.
4. AWS Secrets Manager를 설정하여 민감한 정보(API 키, 인증 정보 등)를 안전하게 관리합니다.
5. CloudTrail 및 CloudWatch를 구성하여 IAM 활동을 모니터링하고 감사합니다.

